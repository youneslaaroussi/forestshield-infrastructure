# üå≥ ForestShield AWS Deployment Script (PowerShell)
# Complete serverless infrastructure setup for deforestation detection

param(
    [string]$Region = "us-west-2",
    [string]$NotificationEmail = ""
)

Write-Host "üöÄ Starting ForestShield AWS Deployment..." -ForegroundColor Green

# Check AWS CLI
if (-not (Get-Command aws -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå AWS CLI not found. Please install AWS CLI first." -ForegroundColor Red
    exit 1
}

# Check AWS credentials
try {
    $accountInfo = aws sts get-caller-identity --output json | ConvertFrom-Json
    $accountId = $accountInfo.Account
    Write-Host "‚úÖ AWS Account: $accountId" -ForegroundColor Green
    Write-Host "‚úÖ Region: $Region" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS credentials not configured. Please run 'aws configure' first." -ForegroundColor Red
    exit 1
}

# Create S3 buckets
Write-Host "üì¶ Creating S3 buckets..." -ForegroundColor Yellow
aws s3 mb "s3://forestshield-processed-data-$accountId" 2>$null
aws s3 mb "s3://forestshield-models-$accountId" 2>$null
aws s3 mb "s3://forestshield-temp-$accountId" 2>$null

# Create IAM roles using CloudFormation
Write-Host "üîê Creating IAM roles..." -ForegroundColor Yellow

$trustPolicyLambda = @"
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
"@

$trustPolicyLambda | Out-File -FilePath "lambda-trust-policy.json" -Encoding UTF8

aws iam create-role --role-name ForestShieldLambdaRole --assume-role-policy-document file://lambda-trust-policy.json 2>$null

# Attach policies
aws iam attach-role-policy --role-name ForestShieldLambdaRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
aws iam attach-role-policy --role-name ForestShieldLambdaRole --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess
aws iam attach-role-policy --role-name ForestShieldLambdaRole --policy-arn arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

# Create SageMaker role
$trustPolicySageMaker = @"
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "sagemaker.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
"@

$trustPolicySageMaker | Out-File -FilePath "sagemaker-trust-policy.json" -Encoding UTF8

aws iam create-role --role-name ForestShieldSageMakerRole --assume-role-policy-document file://sagemaker-trust-policy.json 2>$null
aws iam attach-role-policy --role-name ForestShieldSageMakerRole --policy-arn arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

# Create Step Functions role
$trustPolicyStepFunctions = @"
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "states.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
"@

$trustPolicyStepFunctions | Out-File -FilePath "stepfunctions-trust-policy.json" -Encoding UTF8

aws iam create-role --role-name ForestShieldStepFunctionsRole --assume-role-policy-document file://stepfunctions-trust-policy.json 2>$null
aws iam attach-role-policy --role-name ForestShieldStepFunctionsRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaRole

Write-Host "‚è≥ Waiting for IAM roles to propagate..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# Build Java Lambda functions
Write-Host "üî® Building Java Lambda functions..." -ForegroundColor Yellow
Set-Location lambda-functions
& .\build-all.sh
Set-Location ..

# Create SNS topic
Write-Host "üì¢ Creating SNS topic..." -ForegroundColor Yellow
$snsTopicArn = aws sns create-topic --name deforestation-alerts --query TopicArn --output text

if ($NotificationEmail) {
    aws sns subscribe --topic-arn $snsTopicArn --protocol email --notification-endpoint $NotificationEmail
    Write-Host "‚úÖ Email subscription created for: $NotificationEmail" -ForegroundColor Green
}

# Create environment file
Write-Host "üìù Creating environment configuration..." -ForegroundColor Yellow

$envContent = @"
# üå≥ ForestShield Production Environment Variables
# Generated by deployment script on $(Get-Date)

# AWS Configuration
AWS_REGION=$Region
AWS_ACCOUNT_ID=$accountId

# S3 Buckets
FORESTSHIELD_DATA_BUCKET=forestshield-processed-data-$accountId
FORESTSHIELD_MODELS_BUCKET=forestshield-models-$accountId
FORESTSHIELD_TEMP_BUCKET=forestshield-temp-$accountId

# Lambda Function ARNs (update after Lambda deployment)
LAMBDA_NDVI_CALCULATOR_ARN=arn:aws:lambda:${Region}:${accountId}:function:forestshield-ndvi-calculator
LAMBDA_SEARCH_IMAGES_ARN=arn:aws:lambda:${Region}:${accountId}:function:forestshield-search-images
LAMBDA_SAGEMAKER_PROCESSOR_ARN=arn:aws:lambda:${Region}:${accountId}:function:forestshield-sagemaker-processor

# SageMaker
SAGEMAKER_EXECUTION_ROLE_ARN=arn:aws:iam::${accountId}:role/ForestShieldSageMakerRole

# SNS for Alerts
SNS_DEFORESTATION_ALERTS_ARN=$snsTopicArn

# Production Mode
NODE_ENV=production
USE_REAL_AWS=true
"@

$envContent | Out-File -FilePath ".env.production" -Encoding UTF8

# Clean up temporary files
Remove-Item -Path "lambda-trust-policy.json", "sagemaker-trust-policy.json", "stepfunctions-trust-policy.json" -ErrorAction SilentlyContinue

Write-Host ""
Write-Host "üéâ ForestShield AWS infrastructure setup completed!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Next Steps:" -ForegroundColor Cyan
Write-Host "1. Deploy Lambda functions manually or use CloudFormation template" -ForegroundColor White
Write-Host "2. Copy .env.production to your server" -ForegroundColor White
Write-Host "3. Test the API endpoints" -ForegroundColor White
Write-Host "4. Monitor CloudWatch logs" -ForegroundColor White
Write-Host ""
Write-Host "üîó Resources Created:" -ForegroundColor Cyan
Write-Host "   SNS Topic: $snsTopicArn" -ForegroundColor White
Write-Host "   S3 Buckets: forestshield-*-$accountId" -ForegroundColor White
Write-Host "   IAM Roles: ForestShield*Role" -ForegroundColor White
Write-Host ""
Write-Host "üí∞ Estimated daily cost: < `$5" -ForegroundColor Yellow
Write-Host "üìä Monitor usage in AWS Cost Explorer" -ForegroundColor Yellow

if ($NotificationEmail) {
    Write-Host ""
    Write-Host "üìß Check your email ($NotificationEmail) to confirm SNS subscription" -ForegroundColor Magenta
} 